extends Resource

const RoomAllocation = preload("../models/RoomAllocation.gd")
const RoomStatus = preload("../models/RoomStatus.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Room Model
# A room object represents a game session or match.


# Required: True
# isArray: false
@export var currentAllocation: RoomAllocation:
	set(value):
		__currentAllocation__was__set = true
		currentAllocation = value
var __currentAllocation__was__set := false

# Required: True
# isArray: false
@export var status: RoomStatus:
	set(value):
		__status__was__set = true
		status = value
var __status__was__set := false

# Required: True
# isArray: true
@export var allocations: Array:
	set(value):
		__allocations__was__set = true
		allocations = value
var __allocations__was__set := false

# System generated unique identifier to a game session or match. You can pass in your own `roomId`.
# Required: True
# isArray: false
@export var roomId: String = "":
	set(value):
		__roomId__was__set = true
		roomId = value
var __roomId__was__set := false

# System generated unique identifier for an application.
# Required: True
# isArray: false
@export var appId: String = "":
	set(value):
		__appId__was__set = true
		appId = value
var __appId__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__currentAllocation__was__set:
		bzz_missing_properties.append("currentAllocation")
	if not self.__status__was__set:
		bzz_missing_properties.append("status")
	if not self.__allocations__was__set:
		bzz_missing_properties.append("allocations")
	if not self.__roomId__was__set:
		bzz_missing_properties.append("roomId")
	if not self.__appId__was__set:
		bzz_missing_properties.append("appId")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__currentAllocation__was__set:
		bzz_dictionary["currentAllocation"] = self.currentAllocation
	if self.__status__was__set:
		bzz_dictionary["status"] = self.status
	if self.__allocations__was__set:
		bzz_dictionary["allocations"] = self.allocations
	if self.__roomId__was__set:
		bzz_dictionary["roomId"] = self.roomId
	if self.__appId__was__set:
		bzz_dictionary["appId"] = self.appId
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("currentAllocation"):
		me.currentAllocation = RoomAllocation.bzz_denormalize_single(from_dict["currentAllocation"])
	if from_dict.has("status"):
		me.status = from_dict["status"]
	if from_dict.has("allocations"):
		me.allocations = RoomAllocation.bzz_denormalize_multiple(from_dict["allocations"])
	if from_dict.has("roomId"):
		me.roomId = from_dict["roomId"]
	if from_dict.has("appId"):
		me.appId = from_dict["appId"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

