extends Resource

const MetricValue = preload("../models/MetricValue.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# RecordPartialMetricNameMetricValueArray Model
# Construct a type with a set of properties K of type T


# Required: False
# isArray: true
@export var cpu: Array:
	set(value):
		__cpu__was__set = true
		cpu = value
var __cpu__was__set := false

# Required: False
# isArray: true
@export var memory: Array:
	set(value):
		__memory__was__set = true
		memory = value
var __memory__was__set := false

# Required: False
# isArray: true
@export var rateUnderscoreegress: Array:
	set(value):
		__rateUnderscoreegress__was__set = true
		rateUnderscoreegress = value
var __rateUnderscoreegress__was__set := false

# Required: False
# isArray: true
@export var totalUnderscoreegress: Array:
	set(value):
		__totalUnderscoreegress__was__set = true
		totalUnderscoreegress = value
var __totalUnderscoreegress__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__cpu__was__set:
		bzz_dictionary["cpu"] = self.cpu
	if self.__memory__was__set:
		bzz_dictionary["memory"] = self.memory
	if self.__rateUnderscoreegress__was__set:
		bzz_dictionary["rateUnderscoreegress"] = self.rateUnderscoreegress
	if self.__totalUnderscoreegress__was__set:
		bzz_dictionary["totalUnderscoreegress"] = self.totalUnderscoreegress
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("cpu"):
		me.cpu = MetricValue.bzz_denormalize_multiple(from_dict["cpu"])
	if from_dict.has("memory"):
		me.memory = MetricValue.bzz_denormalize_multiple(from_dict["memory"])
	if from_dict.has("rateUnderscoreegress"):
		me.rateUnderscoreegress = MetricValue.bzz_denormalize_multiple(from_dict["rateUnderscoreegress"])
	if from_dict.has("totalUnderscoreegress"):
		me.totalUnderscoreegress = MetricValue.bzz_denormalize_multiple(from_dict["totalUnderscoreegress"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

