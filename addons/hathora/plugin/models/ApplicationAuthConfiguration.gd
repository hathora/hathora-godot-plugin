extends Resource

const ApplicationAuthConfigurationGoogle = preload("../models/ApplicationAuthConfigurationGoogle.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ApplicationAuthConfiguration Model
# Used to authenticate player requests. Use your own authentication or Hathora's Auth Client.


# Required: False
# isArray: false
@export var google: ApplicationAuthConfigurationGoogle:
	set(value):
		__google__was__set = true
		google = value
var __google__was__set := false

# Construct a type with a set of properties K of type T
# Required: False
# isArray: false
@export var nickname: Dictionary:
	set(value):
		__nickname__was__set = true
		nickname = value
var __nickname__was__set := false

# Construct a type with a set of properties K of type T
# Required: False
# isArray: false
@export var anonymous: Dictionary:
	set(value):
		__anonymous__was__set = true
		anonymous = value
var __anonymous__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__google__was__set:
		bzz_dictionary["google"] = self.google
	if self.__nickname__was__set:
		bzz_dictionary["nickname"] = self.nickname
	if self.__anonymous__was__set:
		bzz_dictionary["anonymous"] = self.anonymous
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("google"):
		me.google = ApplicationAuthConfigurationGoogle.bzz_denormalize_single(from_dict["google"])
	if from_dict.has("nickname"):
		me.nickname = from_dict["nickname"]
	if from_dict.has("anonymous"):
		me.anonymous = from_dict["anonymous"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

