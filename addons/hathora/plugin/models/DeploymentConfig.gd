extends Resource

const DeploymentConfigEnvInner = preload("../models/DeploymentConfigEnvInner.gd")
const ContainerPort = preload("../models/ContainerPort.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DeploymentConfig Model
# User specified deployment configuration for your application at runtime.


# Required: True
# isArray: true
@export var env: Array:
	set(value):
		__env__was__set = true
		env = value
var __env__was__set := false

# Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
# Required: True
# isArray: false
@export var roomsPerProcess: int:
	set(value):
		__roomsPerProcess__was__set = true
		roomsPerProcess = value
var __roomsPerProcess__was__set := false

# Required: True
# isArray: false
@export var planName: String:
	set(value):
		__planName__was__set = true
		planName = value
var __planName__was__set := false

# Additional ports your server listens on.
# Required: False
# isArray: true
@export var additionalContainerPorts: Array:
	set(value):
		__additionalContainerPorts__was__set = true
		additionalContainerPorts = value
var __additionalContainerPorts__was__set := false

# Required: True
# isArray: false
@export var transportType: String:
	set(value):
		__transportType__was__set = true
		transportType = value
var __transportType__was__set := false

# Default port the server listens on.
# Required: True
# isArray: false
@export var containerPort: int:
	set(value):
		__containerPort__was__set = true
		containerPort = value
var __containerPort__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__env__was__set:
		bzz_missing_properties.append("env")
	if not self.__roomsPerProcess__was__set:
		bzz_missing_properties.append("roomsPerProcess")
	if not self.__planName__was__set:
		bzz_missing_properties.append("planName")
	if not self.__transportType__was__set:
		bzz_missing_properties.append("transportType")
	if not self.__containerPort__was__set:
		bzz_missing_properties.append("containerPort")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__env__was__set:
		bzz_dictionary["env"] = self.env
	if self.__roomsPerProcess__was__set:
		bzz_dictionary["roomsPerProcess"] = self.roomsPerProcess
	if self.__planName__was__set:
		bzz_dictionary["planName"] = self.planName
	if self.__additionalContainerPorts__was__set:
		bzz_dictionary["additionalContainerPorts"] = self.additionalContainerPorts
	if self.__transportType__was__set:
		bzz_dictionary["transportType"] = self.transportType
	if self.__containerPort__was__set:
		bzz_dictionary["containerPort"] = self.containerPort
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("env"):
		me.env = DeploymentConfigEnvInner.bzz_denormalize_multiple(from_dict["env"])
	if from_dict.has("roomsPerProcess"):
		me.roomsPerProcess = from_dict["roomsPerProcess"]
	if from_dict.has("planName"):
		me.planName = from_dict["planName"]
	if from_dict.has("additionalContainerPorts"):
		me.additionalContainerPorts = ContainerPort.bzz_denormalize_multiple(from_dict["additionalContainerPorts"])
	if from_dict.has("transportType"):
		me.transportType = from_dict["transportType"]
	if from_dict.has("containerPort"):
		me.containerPort = from_dict["containerPort"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

