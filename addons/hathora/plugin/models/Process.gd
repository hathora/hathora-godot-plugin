extends Resource

const ExposedPort = preload("../models/ExposedPort.gd")
const Region = preload("../models/Region.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Process Model
# A process object represents a runtime instance of your game server and it's metadata.


# Measures network traffic leaving the process in GB.
# Required: True
# isArray: false
@export var egressedBytes: int:
	set(value):
		__egressedBytes__was__set = true
		egressedBytes = value
var __egressedBytes__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var idleSince: String:
	set(value):
		__idleSince__was__set = true
		idleSince = value
var __idleSince__was__set := false

# Tracks the number of active connections to a process.
# Required: True
# isArray: false
@export var activeConnections: int:
	set(value):
		__activeConnections__was__set = true
		activeConnections = value
var __activeConnections__was__set := false

# Tracks the number of room slots available on the process.
# Required: True
# isArray: false
@export var roomSlotsAvailable: int:
	set(value):
		__roomSlotsAvailable__was__set = true
		roomSlotsAvailable = value
var __roomSlotsAvailable__was__set := false

# Process in drain will not accept any new rooms.
# Required: True
# isArray: false
@export var draining: bool:
	set(value):
		__draining__was__set = true
		draining = value
var __draining__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var terminatedAt: String:
	set(value):
		__terminatedAt__was__set = true
		terminatedAt = value
var __terminatedAt__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var stoppingAt: String:
	set(value):
		__stoppingAt__was__set = true
		stoppingAt = value
var __stoppingAt__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var startedAt: String:
	set(value):
		__startedAt__was__set = true
		startedAt = value
var __startedAt__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var startingAt: String:
	set(value):
		__startingAt__was__set = true
		startingAt = value
var __startingAt__was__set := false

# Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
# Required: True
# isArray: false
@export var roomsPerProcess: int:
	set(value):
		__roomsPerProcess__was__set = true
		roomsPerProcess = value
var __roomsPerProcess__was__set := false

# Required: True
# isArray: true
@export var additionalExposedPorts: Array:
	set(value):
		__additionalExposedPorts__was__set = true
		additionalExposedPorts = value
var __additionalExposedPorts__was__set := false

# Required: False
# isArray: false
@export var exposedPort: ExposedPort:
	set(value):
		__exposedPort__was__set = true
		exposedPort = value
var __exposedPort__was__set := false

# /!.  DEPRECATED
# Required: True
# isArray: false
@export var port: int:
	set(value):
		if str(value) != "":
			push_warning("Process: property `port` is deprecated.")
		__port__was__set = true
		port = value
var __port__was__set := false

# /!.  DEPRECATED
# Required: True
# isArray: false
@export var host: String = "":
	set(value):
		if str(value) != "":
			push_warning("Process: property `host` is deprecated.")
		__host__was__set = true
		host = value
var __host__was__set := false

# Required: True
# isArray: false
@export var region: Region:
	set(value):
		__region__was__set = true
		region = value
var __region__was__set := false

# System generated unique identifier to a runtime instance of your game server.
# Required: True
# isArray: false
@export var processId: String = "":
	set(value):
		__processId__was__set = true
		processId = value
var __processId__was__set := false

# System generated id for a completed deployment. Increments by 1.
# Required: True
# isArray: false
@export var deploymentId: int:
	set(value):
		__deploymentId__was__set = true
		deploymentId = value
var __deploymentId__was__set := false

# System generated unique identifier for an application.
# Required: True
# isArray: false
@export var appId: String = "":
	set(value):
		__appId__was__set = true
		appId = value
var __appId__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__egressedBytes__was__set:
		bzz_missing_properties.append("egressedBytes")
	if not self.__idleSince__was__set:
		bzz_missing_properties.append("idleSince")
	if not self.__activeConnections__was__set:
		bzz_missing_properties.append("activeConnections")
	if not self.__roomSlotsAvailable__was__set:
		bzz_missing_properties.append("roomSlotsAvailable")
	if not self.__draining__was__set:
		bzz_missing_properties.append("draining")
	if not self.__terminatedAt__was__set:
		bzz_missing_properties.append("terminatedAt")
	if not self.__stoppingAt__was__set:
		bzz_missing_properties.append("stoppingAt")
	if not self.__startedAt__was__set:
		bzz_missing_properties.append("startedAt")
	if not self.__startingAt__was__set:
		bzz_missing_properties.append("startingAt")
	if not self.__roomsPerProcess__was__set:
		bzz_missing_properties.append("roomsPerProcess")
	if not self.__additionalExposedPorts__was__set:
		bzz_missing_properties.append("additionalExposedPorts")
	if not self.__port__was__set:
		bzz_missing_properties.append("port")
	if not self.__host__was__set:
		bzz_missing_properties.append("host")
	if not self.__region__was__set:
		bzz_missing_properties.append("region")
	if not self.__processId__was__set:
		bzz_missing_properties.append("processId")
	if not self.__deploymentId__was__set:
		bzz_missing_properties.append("deploymentId")
	if not self.__appId__was__set:
		bzz_missing_properties.append("appId")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__egressedBytes__was__set:
		bzz_dictionary["egressedBytes"] = self.egressedBytes
	if self.__idleSince__was__set:
		bzz_dictionary["idleSince"] = self.idleSince
	if self.__activeConnections__was__set:
		bzz_dictionary["activeConnections"] = self.activeConnections
	if self.__roomSlotsAvailable__was__set:
		bzz_dictionary["roomSlotsAvailable"] = self.roomSlotsAvailable
	if self.__draining__was__set:
		bzz_dictionary["draining"] = self.draining
	if self.__terminatedAt__was__set:
		bzz_dictionary["terminatedAt"] = self.terminatedAt
	if self.__stoppingAt__was__set:
		bzz_dictionary["stoppingAt"] = self.stoppingAt
	if self.__startedAt__was__set:
		bzz_dictionary["startedAt"] = self.startedAt
	if self.__startingAt__was__set:
		bzz_dictionary["startingAt"] = self.startingAt
	if self.__roomsPerProcess__was__set:
		bzz_dictionary["roomsPerProcess"] = self.roomsPerProcess
	if self.__additionalExposedPorts__was__set:
		bzz_dictionary["additionalExposedPorts"] = self.additionalExposedPorts
	if self.__exposedPort__was__set:
		bzz_dictionary["exposedPort"] = self.exposedPort
	if self.__port__was__set:
		bzz_dictionary["port"] = self.port
	if self.__host__was__set:
		bzz_dictionary["host"] = self.host
	if self.__region__was__set:
		bzz_dictionary["region"] = self.region
	if self.__processId__was__set:
		bzz_dictionary["processId"] = self.processId
	if self.__deploymentId__was__set:
		bzz_dictionary["deploymentId"] = self.deploymentId
	if self.__appId__was__set:
		bzz_dictionary["appId"] = self.appId
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("egressedBytes"):
		me.egressedBytes = from_dict["egressedBytes"]
	if from_dict.has("idleSince"):
		me.idleSince = from_dict["idleSince"]
	if from_dict.has("activeConnections"):
		me.activeConnections = from_dict["activeConnections"]
	if from_dict.has("roomSlotsAvailable"):
		me.roomSlotsAvailable = from_dict["roomSlotsAvailable"]
	if from_dict.has("draining"):
		me.draining = from_dict["draining"]
	if from_dict.has("terminatedAt"):
		me.terminatedAt = from_dict["terminatedAt"]
	if from_dict.has("stoppingAt"):
		me.stoppingAt = from_dict["stoppingAt"]
	if from_dict.has("startedAt"):
		me.startedAt = from_dict["startedAt"]
	if from_dict.has("startingAt"):
		me.startingAt = from_dict["startingAt"]
	if from_dict.has("roomsPerProcess"):
		me.roomsPerProcess = from_dict["roomsPerProcess"]
	if from_dict.has("additionalExposedPorts"):
		me.additionalExposedPorts = ExposedPort.bzz_denormalize_multiple(from_dict["additionalExposedPorts"])
	if from_dict.has("exposedPort"):
		me.exposedPort = ExposedPort.bzz_denormalize_single(from_dict["exposedPort"])
	if from_dict.has("port"):
		me.port = from_dict["port"]
	if from_dict.has("host"):
		me.host = from_dict["host"]
	if from_dict.has("region"):
		me.region = from_dict["region"]
	if from_dict.has("processId"):
		me.processId = from_dict["processId"]
	if from_dict.has("deploymentId"):
		me.deploymentId = from_dict["deploymentId"]
	if from_dict.has("appId"):
		me.appId = from_dict["appId"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

