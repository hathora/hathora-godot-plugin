extends Resource

const ExposedPort = preload("../models/ExposedPort.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ConnectionInfoV2 Model
# Connection information for the default and additional ports.


# Required: True
# isArray: true
@export var additionalExposedPorts: Array:
	set(value):
		__additionalExposedPorts__was__set = true
		additionalExposedPorts = value
var __additionalExposedPorts__was__set := false

# Required: False
# isArray: false
@export var exposedPort: ExposedPort:
	set(value):
		__exposedPort__was__set = true
		exposedPort = value
var __exposedPort__was__set := false

# Required: True
# isArray: false
# Allowed values: "starting", "active"
@export var status: String = "":
	set(value):
		if str(value) != "" and not (str(value) in __status__allowable__values):
			push_error("ConnectionInfoV2: tried to set property `status` to a value that is not allowed." +
				"  Allowed values: `starting`, `active`")
			return
		__status__was__set = true
		status = value
var __status__was__set := false
var __status__allowable__values := ["starting", "active"]

# System generated unique identifier to a game session or match. You can pass in your own `roomId`.
# Required: True
# isArray: false
@export var roomId: String = "":
	set(value):
		__roomId__was__set = true
		roomId = value
var __roomId__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__additionalExposedPorts__was__set:
		bzz_missing_properties.append("additionalExposedPorts")
	if not self.__status__was__set:
		bzz_missing_properties.append("status")
	if not self.__roomId__was__set:
		bzz_missing_properties.append("roomId")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__additionalExposedPorts__was__set:
		bzz_dictionary["additionalExposedPorts"] = self.additionalExposedPorts
	if self.__exposedPort__was__set:
		bzz_dictionary["exposedPort"] = self.exposedPort
	if self.__status__was__set:
		bzz_dictionary["status"] = self.status
	if self.__roomId__was__set:
		bzz_dictionary["roomId"] = self.roomId
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("additionalExposedPorts"):
		me.additionalExposedPorts = ExposedPort.bzz_denormalize_multiple(from_dict["additionalExposedPorts"])
	if from_dict.has("exposedPort"):
		me.exposedPort = ExposedPort.bzz_denormalize_single(from_dict["exposedPort"])
	if from_dict.has("status"):
		me.status = from_dict["status"]
	if from_dict.has("roomId"):
		me.roomId = from_dict["roomId"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

