extends Resource

const ApplicationAuthConfiguration = preload("../models/ApplicationAuthConfiguration.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Application Model
# An application object is the top level namespace for the game server.


# Email address.
# Required: False
# isArray: false
@export var deletedBy: String = "":
	set(value):
		__deletedBy__was__set = true
		deletedBy = value
var __deletedBy__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: False
# isArray: false
@export var deletedAt: String:
	set(value):
		__deletedAt__was__set = true
		deletedAt = value
var __deletedAt__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var createdAt: String:
	set(value):
		__createdAt__was__set = true
		createdAt = value
var __createdAt__was__set := false

# Email address.
# Required: True
# isArray: false
@export var createdBy: String = "":
	set(value):
		__createdBy__was__set = true
		createdBy = value
var __createdBy__was__set := false

# System generated unique identifier for an organization.
# Required: True
# isArray: false
@export var orgId: String = "":
	set(value):
		__orgId__was__set = true
		orgId = value
var __orgId__was__set := false

# Required: True
# isArray: false
@export var authConfiguration: ApplicationAuthConfiguration:
	set(value):
		__authConfiguration__was__set = true
		authConfiguration = value
var __authConfiguration__was__set := false

# Secret that is used for identiy and access management.
# Required: True
# isArray: false
@export var appSecret: String = "":
	set(value):
		__appSecret__was__set = true
		appSecret = value
var __appSecret__was__set := false

# System generated unique identifier for an application.
# Required: True
# isArray: false
@export var appId: String = "":
	set(value):
		__appId__was__set = true
		appId = value
var __appId__was__set := false

# Readable name for an application.
# Required: True
# isArray: false
@export var appName: String = "":
	set(value):
		__appName__was__set = true
		appName = value
var __appName__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__createdAt__was__set:
		bzz_missing_properties.append("createdAt")
	if not self.__createdBy__was__set:
		bzz_missing_properties.append("createdBy")
	if not self.__orgId__was__set:
		bzz_missing_properties.append("orgId")
	if not self.__authConfiguration__was__set:
		bzz_missing_properties.append("authConfiguration")
	if not self.__appSecret__was__set:
		bzz_missing_properties.append("appSecret")
	if not self.__appId__was__set:
		bzz_missing_properties.append("appId")
	if not self.__appName__was__set:
		bzz_missing_properties.append("appName")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__deletedBy__was__set:
		bzz_dictionary["deletedBy"] = self.deletedBy
	if self.__deletedAt__was__set:
		bzz_dictionary["deletedAt"] = self.deletedAt
	if self.__createdAt__was__set:
		bzz_dictionary["createdAt"] = self.createdAt
	if self.__createdBy__was__set:
		bzz_dictionary["createdBy"] = self.createdBy
	if self.__orgId__was__set:
		bzz_dictionary["orgId"] = self.orgId
	if self.__authConfiguration__was__set:
		bzz_dictionary["authConfiguration"] = self.authConfiguration
	if self.__appSecret__was__set:
		bzz_dictionary["appSecret"] = self.appSecret
	if self.__appId__was__set:
		bzz_dictionary["appId"] = self.appId
	if self.__appName__was__set:
		bzz_dictionary["appName"] = self.appName
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("deletedBy"):
		me.deletedBy = from_dict["deletedBy"]
	if from_dict.has("deletedAt"):
		me.deletedAt = from_dict["deletedAt"]
	if from_dict.has("createdAt"):
		me.createdAt = from_dict["createdAt"]
	if from_dict.has("createdBy"):
		me.createdBy = from_dict["createdBy"]
	if from_dict.has("orgId"):
		me.orgId = from_dict["orgId"]
	if from_dict.has("authConfiguration"):
		me.authConfiguration = ApplicationAuthConfiguration.bzz_denormalize_single(from_dict["authConfiguration"])
	if from_dict.has("appSecret"):
		me.appSecret = from_dict["appSecret"]
	if from_dict.has("appId"):
		me.appId = from_dict["appId"]
	if from_dict.has("appName"):
		me.appName = from_dict["appName"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

