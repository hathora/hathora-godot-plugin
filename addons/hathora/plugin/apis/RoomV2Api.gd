extends "../core/ApiBee.gd"

const CreateRoomRequest = preload("../models/CreateRoomRequest.gd")
const ConnectionInfoV2 = preload("../models/ConnectionInfoV2.gd")
const PickRoomExcludeKeyofRoomAllocations = preload("../models/PickRoomExcludeKeyofRoomAllocations.gd")
const Room = preload("../models/Room.gd")

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API RoomV2Api
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "RoomV2Api"


# Operation createRoom → POST /rooms/v2/{appId}/create
func create_room(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# createRoomRequest: CreateRoomRequest
	# 
	createRoomRequest: CreateRoomRequest,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `roomId` constraints
	if roomId != "":
		if (roomId is String) and roomId.length() > 100:
			var error := ApiError.new()
			#error.internal_code = ERR_INVALID_PARAMETER
			error.identifier = "create_room.param.validation.max_length"
			error.message = "Invalid length for `roomId`, must be smaller than or equal to 100."
			on_failure.call(error)
			return
		if (roomId is String) and roomId.length() < 1:
			var error := ApiError.new()
			error.identifier = "create_room.param.validation.min_length"
			error.message = "Invalid length for `roomId`, must be greater than or equal to 1."
			on_failure.call(error)
			return
		var bzz_roomId_regex := RegEx.new()
		bzz_roomId_regex.compile("/^[a-zA-Z0-9_-]*$/".trim_prefix('/').trim_suffix('/'))
		if not bzz_roomId_regex.search(str(roomId)):
			var error := ApiError.new()
			error.identifier = "create_room.param.validation.pattern"
			error.message = "Invalid value for `roomId`, must conform to the pattern `/^[a-zA-Z0-9_-]*$/`."
			on_failure.call(error)
			return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/create".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_consumable_by_server := ['application/json']
	var bzz_found_producible_mime := false
	for bzz_mime in BZZ_PRODUCIBLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_consumable_by_server:
			bzz_headers["Content-Type"] = bzz_mime
			bzz_found_producible_mime = true
			break
	if not bzz_found_producible_mime:
		var error := ApiError.new()
		error.identifier = "create_room.headers.content_type"
		error.message = "That endpoint only accepts %s as content type(s) and none are supported by this client."
		on_failure.call(error)
		return
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	if roomId != "":
		bzz_query["roomId"] = roomId

	var bzz_body = null
	bzz_body = createRoomRequest

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = ConnectionInfoV2.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func create_room_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# createRoomRequest: CreateRoomRequest
	# 
	createRoomRequest: CreateRoomRequest,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "create_room")
	bzz_callable.bind(
		appId,
		createRoomRequest,
		roomId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation destroyRoom → POST /rooms/v2/{appId}/destroy/{roomId}
func destroy_room(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `roomId` constraints
	if (roomId is String) and roomId.length() > 100:
		var error := ApiError.new()
		#error.internal_code = ERR_INVALID_PARAMETER
		error.identifier = "destroy_room.param.validation.max_length"
		error.message = "Invalid length for `roomId`, must be smaller than or equal to 100."
		on_failure.call(error)
		return
	if (roomId is String) and roomId.length() < 1:
		var error := ApiError.new()
		error.identifier = "destroy_room.param.validation.min_length"
		error.message = "Invalid length for `roomId`, must be greater than or equal to 1."
		on_failure.call(error)
		return
	var bzz_roomId_regex := RegEx.new()
	bzz_roomId_regex.compile("/^[a-zA-Z0-9_-]*$/".trim_prefix('/').trim_suffix('/'))
	if not bzz_roomId_regex.search(str(roomId)):
		var error := ApiError.new()
		error.identifier = "destroy_room.param.validation.pattern"
		error.message = "Invalid value for `roomId`, must conform to the pattern `/^[a-zA-Z0-9_-]*$/`."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/destroy/{roomId}".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "roomId" + "}", _bzz_urlize_path_param(roomId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func destroy_room_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "destroy_room")
	bzz_callable.bind(
		appId,
		roomId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation getActiveRoomsForProcess → GET /rooms/v2/{appId}/list/{processId}/active
func get_active_rooms_for_process(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# processId: String = ""   Eg: processId_example
	# 
	processId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/list/{processId}/active".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "processId" + "}", _bzz_urlize_path_param(processId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = PickRoomExcludeKeyofRoomAllocations.bzz_denormalize_multiple(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func get_active_rooms_for_process_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# processId: String = ""   Eg: processId_example
	# 
	processId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "get_active_rooms_for_process")
	bzz_callable.bind(
		appId,
		processId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation getConnectionInfo → GET /rooms/v2/{appId}/connectioninfo/{roomId}
func get_connection_info(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `roomId` constraints
	if (roomId is String) and roomId.length() > 100:
		var error := ApiError.new()
		#error.internal_code = ERR_INVALID_PARAMETER
		error.identifier = "get_connection_info.param.validation.max_length"
		error.message = "Invalid length for `roomId`, must be smaller than or equal to 100."
		on_failure.call(error)
		return
	if (roomId is String) and roomId.length() < 1:
		var error := ApiError.new()
		error.identifier = "get_connection_info.param.validation.min_length"
		error.message = "Invalid length for `roomId`, must be greater than or equal to 1."
		on_failure.call(error)
		return
	var bzz_roomId_regex := RegEx.new()
	bzz_roomId_regex.compile("/^[a-zA-Z0-9_-]*$/".trim_prefix('/').trim_suffix('/'))
	if not bzz_roomId_regex.search(str(roomId)):
		var error := ApiError.new()
		error.identifier = "get_connection_info.param.validation.pattern"
		error.message = "Invalid value for `roomId`, must conform to the pattern `/^[a-zA-Z0-9_-]*$/`."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/connectioninfo/{roomId}".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "roomId" + "}", _bzz_urlize_path_param(roomId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = ConnectionInfoV2.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func get_connection_info_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "get_connection_info")
	bzz_callable.bind(
		appId,
		roomId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation getInactiveRoomsForProcess → GET /rooms/v2/{appId}/list/{processId}/inactive
func get_inactive_rooms_for_process(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# processId: String = ""   Eg: processId_example
	# 
	processId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/list/{processId}/inactive".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "processId" + "}", _bzz_urlize_path_param(processId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = PickRoomExcludeKeyofRoomAllocations.bzz_denormalize_multiple(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func get_inactive_rooms_for_process_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# processId: String = ""   Eg: processId_example
	# 
	processId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "get_inactive_rooms_for_process")
	bzz_callable.bind(
		appId,
		processId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation getRoomInfo → GET /rooms/v2/{appId}/info/{roomId}
func get_room_info(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `roomId` constraints
	if (roomId is String) and roomId.length() > 100:
		var error := ApiError.new()
		#error.internal_code = ERR_INVALID_PARAMETER
		error.identifier = "get_room_info.param.validation.max_length"
		error.message = "Invalid length for `roomId`, must be smaller than or equal to 100."
		on_failure.call(error)
		return
	if (roomId is String) and roomId.length() < 1:
		var error := ApiError.new()
		error.identifier = "get_room_info.param.validation.min_length"
		error.message = "Invalid length for `roomId`, must be greater than or equal to 1."
		on_failure.call(error)
		return
	var bzz_roomId_regex := RegEx.new()
	bzz_roomId_regex.compile("/^[a-zA-Z0-9_-]*$/".trim_prefix('/').trim_suffix('/'))
	if not bzz_roomId_regex.search(str(roomId)):
		var error := ApiError.new()
		error.identifier = "get_room_info.param.validation.pattern"
		error.message = "Invalid value for `roomId`, must conform to the pattern `/^[a-zA-Z0-9_-]*$/`."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/info/{roomId}".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "roomId" + "}", _bzz_urlize_path_param(roomId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = Room.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func get_room_info_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "get_room_info")
	bzz_callable.bind(
		appId,
		roomId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation suspendRoom → POST /rooms/v2/{appId}/suspend/{roomId}
func suspend_room(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `roomId` constraints
	if (roomId is String) and roomId.length() > 100:
		var error := ApiError.new()
		#error.internal_code = ERR_INVALID_PARAMETER
		error.identifier = "suspend_room.param.validation.max_length"
		error.message = "Invalid length for `roomId`, must be smaller than or equal to 100."
		on_failure.call(error)
		return
	if (roomId is String) and roomId.length() < 1:
		var error := ApiError.new()
		error.identifier = "suspend_room.param.validation.min_length"
		error.message = "Invalid length for `roomId`, must be greater than or equal to 1."
		on_failure.call(error)
		return
	var bzz_roomId_regex := RegEx.new()
	bzz_roomId_regex.compile("/^[a-zA-Z0-9_-]*$/".trim_prefix('/').trim_suffix('/'))
	if not bzz_roomId_regex.search(str(roomId)):
		var error := ApiError.new()
		error.identifier = "suspend_room.param.validation.pattern"
		error.message = "Invalid value for `roomId`, must conform to the pattern `/^[a-zA-Z0-9_-]*$/`."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("POST")

	# Compute the URL path to the API resource
	var bzz_path := "/rooms/v2/{appId}/suspend/{roomId}".replace("{" + "appId" + "}", _bzz_urlize_path_param(appId)).replace("{" + "roomId" + "}", _bzz_urlize_path_param(roomId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func suspend_room_threaded(
	# appId: String = ""   Eg: appId_example
	# 
	appId: String,
	# roomId: String = ""   Eg: roomId_example
	# 
	roomId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "suspend_room")
	bzz_callable.bind(
		appId,
		roomId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


